Capítulo 2

%!encoding: utf-8


==Tópicos cobertos neste capítulo==
- Números Inteiros e de Ponto Flutuante
- Expressões
- Valores
- Operadores
- Avaliando Expressões
- Armazenando Valores em Variáveis
- Sobrescrevendo Variáveis

% Chapter 2

% Before we start writing computer games, we should learn some basic
% programming concepts first. These concepts are values, operators, 
% expressions, and variables. We won't start programming in this chapter,
% but knowing these concepts and the names of things will make learning to
% program much easier. This is because most programming is built on only a
% few simple concepts combined together to make advanced programs.

Antes de começarmos a escrever jogos de computador, nós devemos, primeiro,
aprender alguns conceitos básicos de programação. Estes conceitos são: 
valores, operadores, expressões e variáveis. Nós não vamos começar a programar 
nesse capítulo, mas conhecer estes conceitos e nome das coisas fará com que 
aprender a programar seja muito mais fácil. Isso porque a maior parte da 
programação se resume a combinar alguns poucos conceitos simples para formar 
programas mais avançados.

% Let's start by learning how to use Python's interactive shell.

Vamos começar aprendendo como usar o console interativo do Python.

% <h2 id="SomeSimpleMathStuff">Some Simple Math Stuff</h2>

== Algumas coisas simples de matemática ==

% To open IDLE on Windows, click on <span class='menuname'>Start</span>,
% then <span class='menuname'>Programs</span>, then <span class='menuname'>
% Python 3.1</span>, then <span class='menuname'>IDLE (Python GUI)</span>.
% With IDLE open, let's do some simple math with Python. The interactive shell
% can work just like a calculator. Type <span class='m'>2+2</span> into the
% shell and press the Enter key on your keyboard. (On some keyboards, this is
% the Return key.) As you can see in Figure 2-1, the computer should respond
% with the number 4; the sum of 2+2.

Para abrir o IDLE no Windows, clique em ``Iniciar``, depois em ``Programas``, 
``Python 3.1`` e, finalmente, em ``IDLE (Python GUI)``. Com o IDLE aberto, 
vamos fazer um pouco de matemática básica com Python. O console interativo 
pode funcionar como se fosse uma calculadora. Digite ``2+2`` no console e 
aperte a tecla Enter do seu teclado (em alguns teclados, ela pode se chamar 
Return ou Retorno). Como você pode ver na figura 2-1, o computador deve 
respoder com o número 4; a soma de 2+2.

% <p class='centeredImageP'><img src='images/2-1.png' alt=''
% class='centeredImage' /><br />
% Figure 2-1: Type <span class='m'>2+2</span> into the shell.</p>

Figura 2-1: Digite ``2+2`` no console.

% As you can see, we can use the Python shell just like a calculator. This
% isn't a program by itself because we are just learning the basics right now.
% The <span class='m'>+</span> sign tells the computer to add the numbers 2
% and 2. To subtract numbers use the <span class='m'>-</span> sign, and to
% multiply numbers use an asterisk (<span class='m'>*</span>), like so:</p>

Como você pode ver, nós podemos usar o console interativo do Python exatamente 
como se fosse uma calculadora. Isso ainda não é um programa porque nós ainda 
estamos aprendendo o básico nesse momento. O sinal de ``+`` diz ao computador 
para somar os números 2 e 2. Para subtrair números use o sinal de ``-``, e 
para multiplicar use um asterisco (``*``), assim:

% <table class='centertable simpletable'
% style='width: 200px; text-align: center;'>
% <caption>Table 2-1: The various math operators in Python.</caption>
% <tr><td class='simpletd'><span class='m'>2+2</span></td><td class='simpletd'>
% addition</td></tr>
% <tr><td class='simpletd'><span class='m'>2-2</span></td><td class='simpletd'>
% subtraction</td></tr>
% <tr><td class='simpletd'><span class='m'>2*2</span></td><td class='simpletd'>
% multiplication</td></tr>
% <tr><td class='simpletd'><span class='m'>2/2</span></td><td class='simpletd'>
% division</td></tr>
% </table>

Tabela 2-1: Os vários operadores matemáticos do Python.
| ``2+2`` | adição        |
| ``2-2`` | subtração     |
| ``2*2`` | multiplicação |
| ``2/2`` | divisão       |


% When used in this way, +, -, *, and / are called <span class='term'>operators
% </span> because they tell the computer to perform the specified operation on
% the numbers surrounding them.

Quando usados dessa forma, +, -, *, e / são chamados de ``operadores`` porque 
eles dizem ao computador realizar a operação escolhida nos números quem estão 
em volta dele.

% <h3 id="IntegersandFloatingPointNumbers">Integers and Floating Point Numbers
% </h3>

== Números Inteiros e de Ponto Flutuante ==

% In programming (and also in mathematics), whole numbers like 4, 0, and 99
% are called <span class='term'>integers</span>. Numbers with fractions or
% decimal points (like 3.5 and 42.1 and 5.0) are not integers. In Python, the
% number 5 is an integer, but if we wrote it as 5.0 it would not be an
% integer. Numbers with a decimal point are called <span class='term'>floating
% point numbers</span>. In mathematics, 5.0 is still considered an integer and
% the same as the number 5, but in computer programming the computer considers
% any number with a decimal point as not an integer.

Em programação (e também na matemática), números como 4, 0 e 99 são chamados 
de ``inteiros``. Números com fração ou casas decimais (como 3,5 e 42,1 e 5,0) 
não são inteiros. Em Python, o número 5 é um inteiro, mas se nós escrevermos 
ele como 5.0 ele não será mais um inteiro. Números com casas decimais são 
chamados ``números de ponto flutuante``. Na matemática, 5,0 ainda é 
considerado um inteiro e é igual ao número 5, mas em programação o computador 
considera qualquer número com casa decimal como um número não inteiro.

% No arquivo original tem uma seção comentada sobre o uso da vírgula para 
% separar a casa de milhar. Não faze sentido no Brasil, mas eu adaptei para a
% casa decimal.

% <h3 id="DontUseCommasinNumbers">Don't Use Commas in Numbers</h3>
== Não use vírgula nos números ==

% The Python shell is handy for solving large math problems very quickly. For
% example, try entering <span class='m'>2063 * 3581</span>.</p>

O console interativo do Python é útil para resolver problemas matemáticos 
rapidamente. Por exemplo, tente executar ``2.063 * 0.3581``.

% When I say "enter" I mean type something into IDLE and then press the Enter
% or RETURN key on your keyboard. It will look something like this:

Quando eu digo "executar" eu quero dizer digite alguma coisa no IDLE e então 
aperte a tecla Enter ou Retorno (Return) do seu teclado. O resulta será algo 
do tipo:

% <div class='sourceblurb'>
% &gt;&gt;&gt; 2063 * 3581<br />
% 7387603<br />
% &gt;&gt;&gt;<br />
% </div>

``
2.063 * 0.3581
0.7387603
``

% That was a lot faster than solving it by hand! Solving calculations quickly
% is what computers were made for. But in order for Python to understand what
% calculations we want it to do, we must enter them in a particular way.

Isso foi muito mais rápido do que resolvar não mão! Resolver contas 
rapidamente foi o motivo pelo qual os computadores foram criados. Mas para que 
o Python entendo que conta nós queremos fazer, nós devemos escreve-lás em um 
formato específico.

% In Python, we don't put commas inside numbers. We type <span class='m'>2063
% </span> instead of <span class='m'>2,063</span>. The computer can do what
% you tell it to very quickly, but it needs you to tell it in a very specific
% way. Computer programming is all about writing out precise instructions to
% get the computer to do exactly what you want because really computers are
% dumb. We need to tell them exactly what to do.

Em Python, nós não usamos vírgula nos números. Nós escrevemos ``2.063`` ao 
invés de ``2,063``. O computador pode fazer o que você pedir para ele 
rapidamente, mas ele precisa que você diga a ele em um formato específico. 
Programar um computador é escrever instruções precisas para fazer com que o 
computador faça exatamente o que você quer porque, na realidade, computadore 
são burros. Nós precisamos dizer a eles exatamente o que queremos fazer.

% <h3 id="Expressions">Expressions</h3>

== Expressões ==

% Try typing some of these math problems into the shell, pressing Enter key
% after each one.

Tente digitar alguns destes probelmas matemáticos no console, apertando a 
tecla Enter depois de cada um deles.

% <div class='sourceblurb'>
% 2+2+2+2+2<br />
% 8*6<br />
% 10-5+6<br />
% 2&nbsp;&nbsp;+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2<br />
% </div>

``
2+2+2+2+2
8*6
10-5+6
2   +      2
``

% Figure 2-2 is what the interactive shell in IDLE will look like after you
% type in the instructions above.

Figura 2-2 mostra como o console interativo no IDLE irá ficar depois que você 
digitar as instruções acima.

% <p class='centeredImageP'><img src='images/2-2.png' alt=''
% class='centeredImage' /><br />
% Figure 2-2: What the IDLE window looks like after entering instructions.</p>

Figura 2-2: Como a janela do IDLE ficará depois de executar as instruções.

% <p style='float: right;' class='centeredImageP'><img src='images/2-3.png'
% alt='' class='centeredImage' /><br />
% Figure 2-3: An expression is a made up of values and operators.</p>

Figura 2-3: Uma expressão é formada por valores e operadores.

% These math problems are called expressions. Computers can solve millions of
% these problems in seconds. Expressions are made up of <span class='term'>
% values</span> (the numbers) connected by <span class='term'>operators</span>
% (the math signs). Let's learn exactly what values and operators are.

Estes problemas matemáticos são chamados expressões. Computadores podem 
resolver milhões destes problemas em segundos. Expressões são formadas por 
``valores`` (os números) conectados por ``operadores`` (os símbolos 
matemáticos). Vamos aprender exatamente o que valores e operadores são.

% As you can see with the last expression in the above example, you can put
% any amount of spaces in between the integers and these operators. (But be
% sure to always start at the very beginning of the line, with no spaces in
% front.)

Como você pode ver nas últimas expressões do exemplo acima, você pode colocar 
quantos espaços você quiser entre os inteiros e estes operadores (mas tenha 
certeza de sempre começar no início da linha, sem espaços em branco na frente).

% Numbers are a type of value. Integers are a type of number. But, even though
% integers are numbers, not all numbers are integers. (For example, fractions
% and numbers with decimal points like <span class='m'>2.5</span> are numbers
% that are not integers.

Números são um tipo de valor. Inteiros são um tipo de número. Mas, embora 
inteiros sejam números, nem todos os números são inteiros (por exemplo, 
frações e números com casas decimais como ``2.5`` são números que não são 
inteiros).

% This is like how a cat is a type of pet, but not all pets are cats. Someone
% could have a pet dog or a pet hermit crab. An <span class='term'>expression
% </span> is made up of values (such as integers like 8 and 6) connected by an
% operator (such as the * multiplication sign). A single value by itself is
% also considered an expression.

Isso é como um gato é um tipo de animal de estimação, mas nem todos os animais 
de estimação são gatos. Alguém poderia ter como animal de estimação um 
cachorro ou um carangueijo ermitão. Uma ``expressão`` é formada por valores 
(como os inteiros 8 e 6) conectados por um operador (como o símbolo de 
multiplicação *). Um único valor sozinho também é considerado uma expressão.

% In the next chapter, we will learn about working with text in expressions.
% Python isn't limited to just numbers. It's more than just a fancy calculator!

No próximo capítulo, nós vamos aprender como trabahar com texto nas 
expressões. Python não é limitado apenas à números. É muito mais do que uma 
calculadora rebuscada!








